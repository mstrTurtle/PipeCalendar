# Generated from MyGrammer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,125,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,
        1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,
        1,15,1,16,1,16,1,17,1,17,5,17,90,8,17,10,17,12,17,93,9,17,1,18,1,
        18,3,18,97,8,18,1,19,1,19,1,20,4,20,102,8,20,11,20,12,20,103,1,21,
        1,21,1,21,1,21,1,21,1,21,5,21,112,8,21,10,21,12,21,115,9,21,1,21,
        1,21,1,22,4,22,120,8,22,11,22,12,22,121,1,22,1,22,0,0,23,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,0,39,0,41,19,43,20,45,21,1,0,5,5,0,48,57,
        95,95,183,183,768,879,8255,8256,13,0,65,90,97,122,192,214,216,246,
        248,767,880,893,895,8191,8204,8205,8304,8591,11264,12271,12289,55295,
        63744,64975,65008,65533,1,0,48,57,2,0,123,123,125,125,3,0,9,10,13,
        13,32,32,129,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,51,1,0,0,0,5,53,1,0,0,0,7,55,
        1,0,0,0,9,58,1,0,0,0,11,60,1,0,0,0,13,63,1,0,0,0,15,66,1,0,0,0,17,
        68,1,0,0,0,19,70,1,0,0,0,21,72,1,0,0,0,23,74,1,0,0,0,25,76,1,0,0,
        0,27,78,1,0,0,0,29,80,1,0,0,0,31,83,1,0,0,0,33,85,1,0,0,0,35,87,
        1,0,0,0,37,96,1,0,0,0,39,98,1,0,0,0,41,101,1,0,0,0,43,105,1,0,0,
        0,45,119,1,0,0,0,47,48,5,45,0,0,48,49,5,45,0,0,49,50,5,45,0,0,50,
        2,1,0,0,0,51,52,5,64,0,0,52,4,1,0,0,0,53,54,5,47,0,0,54,6,1,0,0,
        0,55,56,5,45,0,0,56,57,5,62,0,0,57,8,1,0,0,0,58,59,5,36,0,0,59,10,
        1,0,0,0,60,61,5,58,0,0,61,62,5,58,0,0,62,12,1,0,0,0,63,64,5,33,0,
        0,64,65,5,33,0,0,65,14,1,0,0,0,66,67,5,58,0,0,67,16,1,0,0,0,68,69,
        5,45,0,0,69,18,1,0,0,0,70,71,5,43,0,0,71,20,1,0,0,0,72,73,5,42,0,
        0,73,22,1,0,0,0,74,75,5,37,0,0,75,24,1,0,0,0,76,77,5,35,0,0,77,26,
        1,0,0,0,78,79,5,44,0,0,79,28,1,0,0,0,80,81,5,62,0,0,81,82,5,62,0,
        0,82,30,1,0,0,0,83,84,5,91,0,0,84,32,1,0,0,0,85,86,5,93,0,0,86,34,
        1,0,0,0,87,91,3,39,19,0,88,90,3,37,18,0,89,88,1,0,0,0,90,93,1,0,
        0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,36,1,0,0,0,93,91,1,0,0,0,94,97,
        3,39,19,0,95,97,7,0,0,0,96,94,1,0,0,0,96,95,1,0,0,0,97,38,1,0,0,
        0,98,99,7,1,0,0,99,40,1,0,0,0,100,102,7,2,0,0,101,100,1,0,0,0,102,
        103,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,42,1,0,0,0,105,113,
        5,123,0,0,106,107,5,92,0,0,107,112,5,123,0,0,108,109,5,92,0,0,109,
        112,5,125,0,0,110,112,8,3,0,0,111,106,1,0,0,0,111,108,1,0,0,0,111,
        110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,
        116,1,0,0,0,115,113,1,0,0,0,116,117,5,125,0,0,117,44,1,0,0,0,118,
        120,7,4,0,0,119,118,1,0,0,0,120,121,1,0,0,0,121,119,1,0,0,0,121,
        122,1,0,0,0,122,123,1,0,0,0,123,124,6,22,0,0,124,46,1,0,0,0,7,0,
        91,96,103,111,113,121,1,6,0,0
    ]

class MyGrammerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    VARORLITERAL = 18
    INT = 19
    STRLITERAL = 20
    WS = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'---'", "'@'", "'/'", "'->'", "'$'", "'::'", "'!!'", "':'", 
            "'-'", "'+'", "'*'", "'%'", "'#'", "','", "'>>'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "VARORLITERAL", "INT", "STRLITERAL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "VARORLITERAL", "NameChar", 
                  "NameStartChar", "INT", "STRLITERAL", "WS" ]

    grammarFileName = "MyGrammer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


